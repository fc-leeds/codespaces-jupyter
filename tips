From the CS terminal, run code /workspaces/foo

A new tab will open up with /workspaces/foo as the root (sometimes you have to run it twice)

code $HOME or code ~ works too

code *.md also works

If you get a popup in your original window, just click cancel.

On our current project, we clone 8 different repos to /workspaces and change between them often. It works really well (almost all the time - an occasional "wierd" behavior)




INSTALL SAGE KERNEL

python -m pip install sagemath


SageMath can be installed on Linux and macOS via Conda from the conda-forge conda channel.
Both the x86_64 (Intel) architecture and the arm64/aarch64 architectures (including Apple Silicon, M1, M2, M3, M4) are supported.
You will need a working Conda installation: either Miniforge (or Mambaforge), Miniconda or Anaconda. If you don’t have one yet, we recommend installing Miniforge as follows. In a terminal,
$ curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
$ bash Miniforge3-$(uname)-$(uname -m).sh

	•	Miniforge (and Mambaforge) use conda-forge as the default channel.
	•	If you are using Miniconda or Anaconda, set it up to use conda-forge:
	◦	Add the conda-forge channel: conda config --add channels conda-forge
	◦	Change channel priority to strict: conda config --set channel_priority strict



Create a new conda environment containing SageMath, either with mamba or conda:

mamba

conda
$ conda create -n sage sage python=X


where X is version of Python, e.g. 3.9.
To use Sage from there,
	•	Enter the new environment: conda activate sage
	•	Start SageMath: sage





Setting up SageMath as a Jupyter kernel in an existing Jupyter notebook or JupyterLab installation
By default, SageMath installs itself as a Jupyter kernel in the same environment as the SageMath installation. This is the most convenient way to use SageMath in a Jupyter notebook. To check if the Sage kernel is available, start a Jupyter notebook and look for the kernel named sagemath in the list of available kernels. Alternatively, you can use the following command to check which kernels are available:
$ jupyter kernelspec list
Available kernels:
  python3     <path to env>/share/jupyter/kernels/python3
  sagemath    <path to env>/share/jupyter/kernels/sagemath




he kernel is not automatically available if you have installed SageMath in editable mode (pip install -e). In that case, it is recommended to reinstall SageMath in a non-editable way.

You may already have a global installation of Jupyter. For added convenience, it is possible to link your installation of SageMath into your Jupyter installation, adding it to the list of available kernels that can be selected in the notebook or JupyterLab interface.

Assuming that SageMath can be invoked by typing sage, you can use

sage -sh -c 'ls -d $SAGE_VENV/share/jupyter/kernels/sagemath'
to find the location of the SageMath kernel description. Alternatively, use jupyter kernelspec list from the same environment where SageMath is installed to find the location of the SageMath kernel.

Now pick a name for the kernel that identifies it clearly and uniquely.

For example, if you install Sage from source tarballs, you could decide to include the version number in the name, such as sagemath-9.6. If you build SageMath from a clone of the git repository, it is better to choose a name that identifies the directory, perhaps sagemath-dev or sagemath-teaching because the version will change.

Now assuming that the Jupyter notebook can be started by typing jupyter notebook, the following command will install SageMath as a new kernel named sagemath-dev.

jupyter kernelspec install --user $(sage -sh -c 'ls -d $SAGE_VENV/share/jupyter/kernels/sagemath') --name sagemath-dev
The jupyter kernelspec approach by default does lead to about 2Gb of SageMath documentation being copied into your personal jupyter configuration directory. You can avoid that by instead putting a symlink in the relevant spot and

jupyter --paths
to find valid data directories for your Jupyter installation. A command along the lines of

ln -s $(sage -sh -c 'ls -d $SAGE_VENV/share/jupyter/kernels/sagemath') $HOME/.local/share/jupyter/kernels/sagemath-dev
can then be used to create a symlink to the SageMath kernel description in a location where your own jupyter can find it.

If you have installed SageMath from source, the alternative command

ln -s $(sage -sh -c 'ls -d $SAGE_ROOT/venv/share/jupyter/kernels/sagemath') $HOME/.local/share/jupyter/kernels/sagemath-dev
